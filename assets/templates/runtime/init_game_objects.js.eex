//-----------------------------------------------------------------------------
// Initialize Game Objects
//-----------------------------------------------------------------------------
<% import Rez.AST.ValueEncoder %>
<% alias Rez.AST.{Node, NodeHelper, Asset} %>

const game = new <%= Node.js_ctor(@game) %>(
  Handlebars.template(<%= @game.template %>),
  <%= encode_attributes(@game.attributes) %>
);

basic_object.game = game;

/* Encode tasks that will be referred to in behaviours attributes */
<%= for {id, task} <- @game.tasks do %>
game.addGameObject(
  new <%= Node.js_ctor(task) %>(
    "<%= id %>",
    <%= encode_attributes(task.attributes) %>
  )
);
<% end %>

/* Encode game objects */
<%= for {id, actor} <- @game.actors do %>
/*
  <%= inspect(actor.attributes) %>
*/
game.addGameObject(
  new <%= Node.js_ctor(actor) %>(
    "<%= id %>",
    <%= encode_attributes(actor.attributes) %>
  )
);
<% end %>

<%= for {id, asset} <- @game.assets do %>
game.addGameObject(
  new <%= Node.js_ctor(asset) %>(
    "<%= id %>",
    "<%= Asset.asset_path(asset) %>",
    <%= encode_attributes(asset.attributes) %>
  )
);
<% end %>

<%= for {id, card} <- @game.cards do %>
game.addGameObject(
  new <%= Node.js_ctor(card) %>(
    "<%= id %>",
    Handlebars.template(<%= card.template %>),
    <%= encode_attributes(card.attributes) %>
  )
);
<% end %>

<%= for {id, effect} <- @game.effects do %>
game.addGameObject(
  new <%= Node.js_ctor(effect) %>(
    "<%= id %>",
    <%= encode_attributes(effect.attributes) %>
  )
);
<% end %>

<%= for {id, faction} <- @game.factions do %>
game.addGameObject(
  new <%= Node.js_ctor(faction) %>(
    "<%= id %>",
    <%= encode_attributes(faction.attributes) %>
  )
);
<% end %>

<%= for {id, group} <- @game.groups do %>
game.addGameObject(
  new <%= Node.js_ctor(group) %>(
    "<%= id %>",
    <%= encode_attributes(group.attributes) %>
  )
);
<% end %>

<%= for {id, inventory} <- @game.inventories do %>
game.addGameObject(
  new <%= Node.js_ctor(inventory) %>(
      "<%= id %>",
      <%= encode_attributes(inventory.attributes) %>
    )
);
<% end %>

<%= for {id, item} <- @game.items do %>
game.addGameObject(
  new <%= Node.js_ctor(item) %>(
    "<%= id %>",
    <%= if is_nil(item.template) do %>
      null
    <% else %>
      Handlebars.template(<%= item.template %>)
    <% end %>,
    <%= encode_attributes(item.attributes) %>
  )
);
<% end %>

<%= for {id, list} <- @game.lists do %>
game.addGameObject(
  new <%= Node.js_ctor(list) %>(
    "<%= id %>",
    <%= encode_attributes(list.attributes) %>
  )
);
<% end %>

<%= for {id, plot} <- @game.plots do %>
game.addGameObject(
  new <%= Node.js_ctor(plot) %>(
    "<%= id %>",
    <%= encode_attributes(plot.attributes) %>
  )
);
<% end %>

<%= for {id, relationship} <- @game.relationships do %>
game.addGameObject(
  new <%= Node.js_ctor(relationship) %>(
    "<%= id %>",
    <%= encode_attributes(relationship.attributes) %>
  )
);
<% end %>

<%= for {id, scene} <- @game.scenes do %>
game.addGameObject(
  new <%= Node.js_ctor(scene) %>(
    "<%= id %>",
    Handlebars.template(<%= scene.layout_template %>),
    <%= encode_attributes(scene.attributes) %>
  )
);
<% end %>

<%= for {slot_id, slot} <- @game.slots do %>
game.addGameObject(
  new <%= Node.js_ctor(slot) %>(
    "<%= slot_id %>",
    <%= encode_attributes(slot.attributes) %>
  )
);
<% end %>

<%= for {id, system} <- @game.systems do %>
game.addGameObject(
  new <%= Node.js_ctor(system) %>(
    "<%= id %>",
    <%= encode_attributes(system.attributes) %>
  )
);
<% end %>

<%= for {id, zone} <- @game.zones do %>
(function() {
  let zone = new <%= Node.js_ctor(zone) %>(
    "<%= id %>",
    <%= encode_attributes(zone.attributes) %>
  )
  game.addGameObject(zone);

  <%= for {loc_id, location} <- zone.locations do %>
    (function() {
      let location = new <%= Node.js_ctor(location) %>(
        "<%= loc_id %>",
        <%= if is_nil(location.template) do %>
          null
        <% else %>
          Handlebars.template(<%= location.template %>)
        <% end %>,
        <%= encode_attributes(location.attributes) %>
      );
      zone.addLocation(location);
      game.addGameObject(location);
    })();
  <% end %>
})();
<% end %>

<%= for {id, object} <- @game.objects do %>
  game.addGameObject(
    new <%= Node.js_ctor(object) %>(
      "<%= id %>",
      <%= encode_attributes(object.attributes) %>
    )
  )
<% end %>

<%
  generator_init = {
    ["list", "event"],
    """
    {
      const source = $(list.getAttribute("source"));
      const copies = list.getAttribute("copies");
      const customize = list.getAttribute("customize");
      const objects = [];
      for(let idx = 0; idx < copies; idx += 1) {
        let copy = source.copyWithAutoId();
        customize(copy);
        objects.push(copy);
      }
      list.setAttribute("values", objects);
    }
    """
  }
%>

<%= for {id, generator} <- @game.generators do %>
  <%
    generator = NodeHelper.set_std_func_attr(
      generator,
      "on_init",
      generator_init
    )
  %>

  (function() {
    game.addGameObject(
      new RezList(
        "<%= id %>",
        <%= encode_attributes(generator.attributes) %>
      )
    )
  })();
<% end %>

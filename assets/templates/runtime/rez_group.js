//-----------------------------------------------------------------------------
// Group
//
// Group represents a group of assets that is dynamically generated by the
// include_tag and exclude_tag attributes.
//-----------------------------------------------------------------------------

function RezGroup(id, attributes) {
  this.id = id;
  this.game_object_type = "group";
  this.attributes = attributes;
  this.assets = [];
  this.properties_to_archive = ["assets"];
  this.changed_attributes = [];
}

RezGroup.prototype = {
  __proto__: basic_object,
  constructor: RezGroup,

  elementInitializer() {
    this.filterAssets();
  },

  filterAssets() {
    // Start with all assets
    let assets = this.game.getAll("asset");

    // Does the asset have the right type
    const selected_type = this.getAttributeValue("type");
    assets = assets.filter((asset) => {return asset.type == selected_type});

    // Assets without tags can't be in a group
    assets = assets.filter((asset) => {return asset.hasAttribute("tags") && asset.getAttributeValue("tags").size > 0});

    // If there is an include filter, filter those without the relevant tags
    const include_tags = this.getAttributeValue("include_tags", new Set());
    if(include_tags.size > 0) {
      assets = assets.filter((asset) => {
        const tags = asset.getAttributeValue("tags");
        return tags.hasSubset(include_tags);
      });
    }

    // If there is an exclude filter, filter those with the relevant tags
    const exclude_tags = this.getAttributeValue("exclude_tags", new Set());
    if(exclude_tags.size > 0) {
      assets = assets.filter((asset) => {
        const tags = asset.getAttributeValue("tags");
        return tags.intersection(exclude_tags).size == 0;
      });
    }

    if(assets.size == 0) {
      console.log("Attempt to create group that matches 0 assets!");
    }

    assets = assets.map((asset) => {return asset.id}).fy_shuffle();

    this.setAttribute("assets", assets);
  },

  randomAssetId() {
    if(this.assets.size == 0) {
      this.filterAssets();
    }

    const asset_id = this.assets.shift();
    if(typeof(asset_id) == "undefined") {
      throw "Attempt to get random asset from Group " + this.id + " with no matching assets!";
    }

    return asset_id;
  }
};

window.Rez.RezGroup = RezGroup;

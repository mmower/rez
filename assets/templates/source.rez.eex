%%
%% Game created with Rez <%= Rez.version %>
%% http://rez-lang.com/
%% By Matt Mower <self@mattmower.com>
%% Released 2022, 2023 under the GPLv3 license
%%

@game {
  name: "<%= @name %>"
  archive_format: 1
  title: "<%= @game_title %>"
  author: "<%= @author_name %>"
  author_email: "<%= @author_email %>"
  game_homepage: "<%= @game_homepage %>"
  IFID: "<%= @ifid %>"
  version: "<%= Rez.version %>"
  created: "<%= @created %>"
  initial_scene_id: #explore_dungeon

  @stylesheet {
    .disabled-link {
      color: #757575; /* Greyed out color */
      cursor: default; /* Change cursor to default to indicate it's not clickable */
      pointer-events: none; /* Prevent clicking */
    }

    .tooltip {
      display: inline-block;
      position: relative;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      width: 120px;
      background-color: black;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px;
      position: absolute;
      z-index: 1;

      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
  }

  blocks: [#sidebar]
  bindings: {messages: `game.$flash_messages}

  layout: ```
  <!-- Flash Messages -->
  <div id="flash">
    $foreach(message:messages) {%
      <div class="notification">
        <button class="delete"></button>
        ${message}
    %}
  </div>
  <!-- Main Content -->
  <section class="main-content columns is-fullheight">
    <aside class="column is-2 is-narrow-mobile is-fullheight section is-hidden-mobile">${sidebar}</aside>
    <div class="container column is-10">${content}</div>
  </section>
  <!-- End -->
  ```

  @script {
    // Enable notication delete buttons
    document.addEventListener('DOMContentLoaded', () => {
      (document.querySelectorAll('.notification .delete') || []).forEach(($delete) => {
        const $notification = $delete.parentNode;

        $delete.addEventListener('click', () => {
          $notification.parentNode.removeChild($notification);
        });
      });
    });
  }

  %(../lib/stdlib.rez)

  @card sidebar {
    bindings: {
      clock: #clock
      player: #player
      weapon: &player.weapon
    }
    content: ```
    <p class="menu-label is-hidden-touch">
    Turn: ${clock.turns}
    </p>

    <ul>
      <li>Wounds: ${player.wounds}</li>
      <li>Initiative: ${player.initiative}</li>
      <li>Strength: ${player.strength}</li>
      <li>Toughness: ${player.toughness}</li>
      <li>Fight: ${player.fighting}</li>
      <li>Dodge: ${player.dodge}</li>
      <li>Mana: ${player.mana}</li>
      <li>Gold: ${player.gold}</li>
      <li>XP: ${player.xp}</li>
    </ul>

    Current Weapon:
    ${weapon.name} â€” ${weapon.damage | desc_roll}
    ```
  }

  @filter f_die_roll {
    name: "desc_roll"
    impl: (d) => {return d.description();}
  }

  @system clock {
    enabled: true
    priority: 1

    turns: 0

    after_event: (clock, evt, result) => {
      if(evt.target.dataset.turn === "1") {
        clock.advance();
      }
      return result;
    }

    advance: function() {
      this.turns += 1;
    }
  }

  @actor player {
    name: "The adventurer"
    description: "A bold adventurer"
    class: :m

    container_id: #player_inventory

    fought_boss: false

    initiative: 2
    strength: 8
    toughness: 6
    fighting: 8
    dodge: 0
    wounds: 0
    mana: 10

    gold: 0

    kills: 0
    xp: 0

    weapon: ^p{
      const weapon_id = $player.container.getItemForSlot("weapon_slot");
      return $(weapon_id);
    }

    on_start: (player) => {
      player.container.setItemForSlot("weapon_slot", "dagger");
    }
  }

  @scene player_setup {
    layout_mode: :single
    layout: ```
    ${content}
    ```
    initial_card_id: #player_set_name
  }

  @card player_set_name {
    bindings: {player: #player}
    content: ```
    <div x-data="{player_name: ${player.name | quoted}}">
      <div class="field">
        <label class="label">What is your name adventurer?</label>
        <div class="control">
          <input x-model="player_name" class="input" type="text" rez-bind="player.name" placeholder="Name">
        </div>
      </div>
      <div class="field">
        <div class="control">
          <textarea class="textarea is-small" rez-bind="player.description" placeholder="Describe yourself"></textarea>
        </div>
      </div>
      <div class="field">
        <label class="label">What class are you playing?</label>
        <div class="control">
          <label class="radio">
            <input type="radio" name="class" value="f" rez-bind="player.class">Figher
          </label>
          <label class="radio">
            <input type="radio" name="class" value="r">Rogue
          </label>
          <label class="radio">
            <input type="radio" name="class" value="m">Mage
          </label>
        </div>
      </div>
      <div class="control" x-cloak x-show="player_name.length > 1">
        <button data-event="switch" data-target="explore_dungeon" class="button">Enter the Dungeon</button>
      </div>
    </div>
    ```

    on_finish: (card) => {
      if($player.class === "f") {
        player.strength += 1;
        player.toughness += 1;
        player.fighting += 2;
      } else if($player.class == "r") {
        player.initiative += 2;
        player.fighting += 1;
        player.dodge += 1;
      } else if($player.class == "m") {
        player.strength -= 1;
        player.toughness -= 1;
        player.fighting -= 2;
        player.mana += 10;
      }
    }
  }

  @actor balrog {
    monster: true
    boss: true

    name: "Balrog"
    description: "A huge figure wreathed in fire and smoke, terrible to behold"

    initiative: 6
    strength: 12
    toughness: 12
    fighting: 12
    dodge: -3
    damage: 12
    wounds: 0
    xp: 30
  }

  @actor troll {
    $template: true

    monster: true
    name: "Troll"
    description: "A big ugly troll, wielding a club"

    initiative: 1
    strength: 12
    toughness: 10
    fighting: 8
    dodge: -2
    wounds: 0
    xp: 10

    treasure: |#average_treasure 1 #good_treasure 1 #excellent_treasure 2|
  }

  @actor troll_chief {
    $template: true

    monster: true
    name: ^i{"Chief " + $("troll_names").randomElement()}
    description: "A huge, formidable, troll wielding an iron shod club"

    initiative: 2
    strength: 12
    toughness: 12
    fighting: 12
    dodge: -1
    damage: 10
    wounds: 0
    xp: 25

    treasure: |#amazing_treasure 1|
  }

  @list troll_names {
    values: [
      "Stonegruff Grumblehide"
      "Riverfang Rockstomper"
      "Thornclaw Earthgrinder"
      "Darkshade Loomshadow"
      "Cragjaw Mossbeard"
      "Gloomheart Shadowgrove"
      "Grimsnarl Knotwood"
      "Stormeye Thunderhowl"
      "Rusttooth Ironbiter"
      "Earthrend Skyfury"
    ]
  }

  @actor goblin {
    $template: true

    monster: true
    name: "Goblin"
    description: "A sneaky goblin, wielding a dagger"

    initiative: 1
    strength: 4
    toughness: 6
    fighting: 6
    dodge: 1
    damage: 4
    wounds: 0
    xp: 1

    treasure: |#poor_treasure 4 #average_treasure 2 #good_treasure 1|
  }

  @actor goblin_chief {
    $template: true

    monster: true
    name: ^i{"Chief " + $("goblin_names").randomElement()}
    description: "A large, tough, looking goblin wielding a flail"

    initiative: 2
    strength: 6
    toughness: 8
    fighting: 8
    dodge: 1
    damage: 8
    wounds: 0
    xp: 5

    treasure: |#average_treasure 1 #good_treasure 3 #excellent_treasure 1|
  }

  @list goblin_names {
    values: [
       "Splug"
       "Pugna"
       "Dreeble"
       "Ghrak"
       "Blarg"
       "Bogrot"
       "Zorg"
       "Drool"
       "Fozg",
       "Ghrak"
    ]
  }

  @actor spider {
    $template: true

    monster: true
    name: "Spider"
    description: "A dark and venmous spider"

    initiative: 2
    strength: 6
    toughness: 6
    fighting: 4
    deck: 6
    wounds: 0
    xp: 3

    treasure: |#poor_treasure 1 #average_treasure 1 #good_treasure 1|
  }

  @actor spider_queen {
    $template: true

    monster: true
    name: ^i{"Queen " + $("spider_names").randomElement()}
    description: "A huge spider with glowing eyes and terrible fangs"

    initiative: 3
    strength: d8
    toughness: 8
    fighting: 6
    dodge: 1
    damage: 8
    wounds: 0
    xp: 9

    treasure: |#average_treasure 1 #good_treasure 2 #excellent_treasure 2|
  }

  @list spider_names {
    values: [
      "Venomshade"
      "Gloomweb"
      "Crimsoneye"
      "Whisperthread"
      "Wraithspindle"
      "Glimmerweb"
      "Netherveil"
      "Starweave"
      "Dreadspindle"
      "Twilightfang"
    ]
  }

  @actor orc {
    $template: true

    monster: true
    name: "Orc"
    description: "A large tusked humanoid with green skin, wielding a longsword"

    initiative: 3
    strength: 8
    toughness: 10
    fighting: 8
    damage: 8
    wounds: 0
    xp: 5

    treasure: |#average_treasure 1 #good_treasure 1 #excellent_treasure 1|
  }

  @actor orc_chief {
    $template: true

    monster: true
    name: ^i{"Chief " + $("orc_names").randomElement()}
    description: "A huge tusked humanoid with green skin, wielding a great sword"

    initiative: 4
    strength: 10
    toughness: 10
    fighting: 10
    damage: 10
    wounds: 0
    xp: 15

    treasure: |#good_treasure 1 #excellent_treasure 1 #amazing_treasure 1|
  }

  @list orc_names {
    values: [
      "Gruk"
      "Zog"
      "Urak"
      "Thulok"
      "Drazag"
      "Skullcrusher"
      "Bloodfang"
      "Snaggletusk"
      "Gork"
      "Azog"
    ]
  }

  @object poor_treasure {
    description: "a small pouch of gold"

    gold: 2d6
    weapon: |#dagger 2 #short_sword 1|
  }

  @object average_treasure {
    description: "a fat pouch of gold"

    gold: 3d6
    weapon: |#dagger 1 #short_sword 1|
  }

  @object good_treasure {
    description: "a large bag of gold"

    gold: 6d6
    weapon: |#dagger 1 #short_sword 2 #long_sword 1 #healing_potion 1|
  }

  @object excellent_treasure {
    description: "a small chest of gold"

    gold: 10d6
    weapon: |#short_sword 1 #long_sword 2 #moon_sword 1 #healing_potion 1|
  }

  @object amazing_treasure {
    descrption: "a large chest of gold"

    gold: 20d6
    weapon: |#long_sword 1 #moon_sword 2 #elven_sword 1 #healing_potion 2|
  }

  @derive :weapon :item
  @derive :edged_weapon :weapon
  @derive :sword :edged_weapon
  @derive :crush_weapon :weapon
  @derive :mace :crush_weapon
  @derive :belt :item
  @derive :potion :item

  @item dagger {
    type: :edged_weapon
    magic: false

    name: "dagger"
    damage: 1d4
  }

  @item short_sword {
    type: :edged_weapon
    magic: false

    name: "shortsword"
    damage: 1d6
  }

  @item long_sword {
    type: :edged_weapon
    magic: false

    name: "longsword"
    damage: 1d8
  }

  @item moon_sword {
    type: :edged_weapon
    magic: false

    name: "moon silver longsword"
    damage: 1d8+1
  }

  @item elven_sword {
    type: :edged_weapon
    magic: true

    name: "elven longwword"
    damage: 1d8+2
  }

  @item healing_potion {
    type: :potion
  }

  @slot weapon_slot {
    accepts: :weapon
  }

  @slot potion_slot {
    accepts: :potion
  }

  @slot backpack_slot {
    accepts: :item
  }

  @inventory player_inventory {
    title: "Player inventory"
    slots: #{#weapon_slot #potion_slot #backpack_slot}
  }

  @scene explore_dungeon {
    layout_mode: :single
    layout: ```
    ${content}
    ```
    initial_card_id: #c_dungeon_chamber %%#c_dungeon_entrance
  }

  @filter exit_link {
    name: "exit_link"
    impl: (exit, location) => {
      function title(exit) {
        if(exit.by) {
          return `${exit.by.capitalize()} ${exit.dir} to ${exit.alias.capitalize()}`;
        } else {
          return `${exit.dir.capitalize()} to ${exit.alias.capitalize()}`;
        }
      }

      if(exit.check) {
        const can_use_exit = new RezDecision();
        const decide_fn = location.getAttribute(exit.check);
        decide_fn(can_use_exit);
        if(can_use_exit.wasYes) {
          return `<li><a href="javascript:void(0);" data-event="card" data-target="${exit.to}">${title(exit)}</a></li>`;
        } else if(can_use_exit.data.hide) {
          return "";
        } else {
          return `<li class="tooltip"><a href="#"" class="disabled-link">${title(exit)}</a><span class="tooltiptext">${can_use_exit.reason}</li>`;
        }
      } else {
        return `<li><a href="javascript:void(0);" data-event="card" data-target="${exit.to}">${title(exit)}</a></li>`;
      }
    }
  }

  @card c_exits {
    bindings: {location: function(block) {return block.parent_block.source;}}
    content: ```
    <div class="block">
    From here you can:<br /><ul>
    $foreach(exit: location.exits) {%
      ${exit | exit_link: location}
    %}</ul>
    </div>
    ```
  }

  @card c_dungeon_entrance {
    exits: [{alias: "outside" dir: "north" to: #c_outside_world check: :can_leave} {alias: "tunnel" dir: "west" to: #c_dungeon_tunnel_1}]
    blocks: [#c_exits]
    location: [:dungeon :entrance]
    content: ```
    The entrance to a dank, dark, dungeon. Water drips from the ceiling and the floor is slimy and uneven. Should you be doing this?

    ${c_exits}
    ```

    can_leave: function(allow) {
      if($("player").fought_boss) {
        allow.yes();
      } else {
        allow.no("You cannot escape the dungeon, something has placed a terrible spell upon the entrance and you cannot pass!");
      }
    }
  }

  @card c_dungeon_tunnel_1 {
    exits: [{alias: "entrance" dir: "east" to: #c_dungeon_entrance} {alias: "tunnel" dir: "south" to: #c_dungeon_tunnel_2}]
    location: [:dungeon :tunnel_1]
    blocks: [#c_exits]
    content: ```
    A dark echo-ey tunnel. You can hear your heart beating fast.

    ${c_exits}
    ```
  }

  @card c_dungeon_tunnel_2 {
    exits: [{alias: "tunnel" dir: "north" to: #c_dungeon_tunnel_1} {alias: "chamber" dir: "south" to: #c_dungeon_chamber}]
    location: [:dungeon :tunnel_2]
    blocks: [#c_exits]
    content: ```
    A narrow tunnel that smells foul, something horrible lurks nearby.

    ${c_exits}
    ```
  }

  @object location {
    monster_id: _
  }

  @card c_dungeon_chamber {
    exits: [{alias: "tunnel" dir: "north" to: #c_dungeon_tunnel_2}]
    bindings: {location: #location}
    blocks: [#c_exits]
    location: [:dungeon :chamber]
    monster_id: 0
    content: ```
    <div class="box">
    <div class="block">
    Clearly the lair of the beast. Bomes and small trinkets litter the filthy floor.
    </div>
    $if(location.monster) {%
    <div class="block">
    There is a <a data-event="interlude" data-target="engage_in_battle" data-monster_id="${location.monster.id}">${location.monster.name}</a> here!
    </div>
    %}
    ${c_exits}
    </div>
    ```

    on_start: () => {
      const goblin = $("goblin").copyWithAutoId();
      $game.addGameObject(goblin);
      $("location").monster = goblin;
    }
  }

  @card c_outside_world {
    content: ```
    The clear daylight of the outside!

    You have <a data-event="switch" data-target="end_game">made it</a>.
    ```
  }

  @scene engage_in_battle {
    monster: _
    on_start: (scene) => {
      scene.monster = $(scene.current_block.monster_id);
      console.log("Starting battle scene with monster: " + scene.monster.name);
    }
    layout_mode: :stack
    initial_card_id: #battle_card
  }

  @object spell_fireball {
    name: "Fireball"
    cost: 2
    damage: 5d6
  }

  @object spell_missile {
    name: "Magic Missile"
    cost: 1
    damage: 2d4
  }

  @filter cast_spell {
    name: "cast_spell"
    impl: (spell) => {
      if($player.class === "m") {
        if($player.mana >= spell.cost) {
          return `<li><a data-event="cast_spell" data-spell="${spell.id}">Cast ${spell.name}</a></li>`;
        } else {
          return `<li><a href="#" class="disabled_link">Cast ${spell.name}</a></li>`;
        }
      } else {
        return "";
      }
    }
  }

  @card battle_card {
    bindings: {
      monster: `scene.monster
      fireball: #spell_fireball
      weapon: &player.weapon
    }
    content: ```
    <div class="box">
      <div class="block">You face off against the ${monster.name}.</div>
      <div class="block">
        <ul>
          <li>Wounds: ${monster.wounds}</li>
          <li>Initiative: ${monster.initiative}</li>
          <li>Strength: ${monster.strength}</li>
          <li>Toughness: ${monster.toughness}</li>
          <li>Fight: ${monster.fighting}</li>
          <li>Damage: ${monster.damage}</li>
        </ul>
      </div>
      <div class="block">
        <ul>
          <li><a data-event="fight" data-turn="1">Attack with ${weapon.name}</a></li>
          ${fireball | cast_spell}
          <li><a data-event="flee">Attempt to Flee</a></li>
        </ul>
      </div>
    </div>
    ```

    on_cast_spell: (card, params) => {
      const block = card.current_block;

      const spell = $(params.spell);
      block.messages = [];

      $player.mana -= spell.cost;
      const damage = spell.damage.roll();

      block.messages.push(`Casts ${spell.name} for ${damage} damage`);

      const monster = card.scene.monster;
      const [wounds, _] = Math.div_mod(damage, monster.toughness)

      if(wounds === 0) {
        block.messages.push(`Grazes the ${monster.name}`);
      } else {
        block.messages.push(`Causes ${wounds} wounds to the ${monster.name}`);
      }

      monster.wounds += wounds;
      if(monster.wounds>3) {
        block.messages.push("Killing it!");
        return {
          card: "monster_dies"
        };
      } else {
        return {
          card: "battle_card"
        };
      }
    }

    on_fight: (card, evt) => {
      const monster = card.scene.monster;
      const order = $("initiative_deck").order([$player, monster]);
      console.dir(order);

      const block = card.current_block;
      block.messages = [];

      let attacker = order[0].entity;
      let defender = order[1].entity;

      block.messages.push(`${attacker.name} goes 1st with ${order[0].initiative.face}.`);
      const first_attack = card.attack(attacker, defender);
      block.messages.push(first_attack.a_desc);
      if(first_attack.hit) {
        block.messages.push(first_attack.w_desc);
        if(first_attack.dies) {
          return {card: first_attack.defender == $player ? "player_dies" : "monster_dies"};
        }
      }

      block.messages.push(`${defender.name} goes 2nd with ${order[1].initiative.face}.`);
      const second_attack = card.attack(defender, attacker);
      block.messages.push(second_attack.a_desc);
      if(second_attack.hit) {
        block.messages.push(second_attack.w_desc);
        if(second_attack.dies) {
          return {card: second_attack.defender == $player ? "player_dies" : "monster_dies"};
        }
      }

      return {
        card: "battle_card"
      };
    }

    attack_roll: function(sides, mod) {
      const die = new RezDieRoll(sides, 1, mod);

      let total_roll = 0;
      let roll = 0;
      let aces = 0;

      do {
        roll = die.roll();
        console.log(`${die.description()} => ${roll}`);
        total_roll += roll;
        if(roll == sides) {
          aces += 1;
          console.log(`Ace: ${aces}`);
        }
      } while(roll == sides);

      return [total_roll, aces];
    }

    attack: function(attacker, defender) {
      const result = {};
      result.attacker = attacker;
      result.defender = defender;

      const [attack_roll, aces] = this.attack_roll(attacker.fighting, attacker.wounds);

      result.attack = attack_roll;
      result.aces = aces;
      result.parry = 2 + Math.floor(defender.fighting / 2) + (defender.dodge ?? 0);
      result.hit = result.attack >= result.parry;

      result.a_desc = `${result.hit ? "Hits" : "Misses"} (${result.attack} vs ${result.parry})`;

      if(result.hit) {
        result.damage = new RezDieRoll(attacker.strength).roll();

        if(result.aces > 0) {
          let ace_damage = 0;
          let ace_roll;
          do {
            ace_roll = Rez.D6.roll();
            ace_damage += ace_roll;
          } while(ace_roll == 6);
          result.damage += ace_damage;
        }

        if(attacker.container) {
          const weapon = $(attacker.container.getItemForSlot("weapon_slot"));
          result.damage += weapon.damage.roll();
        } else {
          result.damage += new RezDieRoll(attacker.damage).roll();
        }

        const [wounds, _] = Math.div_mod(result.damage, defender.toughness)
        result.wounds = wounds;

        if(result.wounds > 0) {
          result.w_desc = `Causes ${result.wounds} wounds! (${result.damage} vs ${defender.toughness})`;
        } else {
          result.w_desc = `Graze, causing no damage (${result.damage} vs ${defender.toughness})`;
        }

        defender.wounds += result.wounds;
        result.dies = defender.wounds > 3;
      }

      return result;
    }

    on_flee: (card, evt) => {
    }

    flipped_content: ```
    <div class="box">
      <ul>
      $foreach(message: $block.messages) {%
        <li>${message}</li>
      %}
      </ul>
    </div>
    ```
  }

  @card player_dies {
    content: ```
    Player is dead!
    ```
  }

  @card monster_dies {
    bindings: {monster: `scene.monster}
    content: ```
    <div class="box">
     ${monster.name} is dead! <a data-event="card" data-target="loot_the_room">Loot the room</a>.
    </div>
    ```

    on_start: (card) => {
      $("location").monster_id = "";
      $player.xp += card.scene.monster.xp;
    }
  }

  @card loot_the_room {
    gold: _

    content: ```
    <div class="box">
    You find ${card.gold} gold. <a data-event="resume">Continue</a>
    </div>
    ```

    on_start: (card) => {
      const treasure = $(card.scene.monster.treasure);
      card.gold = treasure.gold.roll();
      $player.gold += card.gold;
    }
  }

  @scene end_game {
    initial_card_id: #end_game_card
  }

  @card end_game_card {
    bindings: {player: #player
              clock: #clock}
    content: ```
    You have escaped the dungeon in ${clock.turns} turns. You killed ${player.kills} monsters, won ${player.gold} gold and ${player.xp} xp.
    ```
  }

  @object initiative_deck {
    cards: _
    draw_pile: _

    on_init: (deck) => {
      const suits = ["C", "D", "H", "S"];
      const faces = ["2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"];

      deck.cards = Number.range(0, 51).map((n) => {
        let [suit, card] = Math.div_mod(n, 13);
        card = card == 0 ? 13 : card;
        return {
          n: n,
          suit: suit,
          card: card,
          face: `${faces[card-1]}${suits[suit]}`
        }
      });
      deck.reset();
    }

    reset: function() {
      this.draw_pile = [...this.cards].fy_shuffle();
    }

    card_sort: function(card_1, card_2) {
      if(card_1.card == card_2.card) {
        return card_2.suit - card_1.suit;
      } else {
        return card_2.card - card_1.card;
      }
    }

    order: function(entities) {
      this.reset();

      const order = [];

      for(const entity of entities) {
        order.push({entity: entity, initiative: this.draw(entity.initiative)});
      }

      order.sort((i1, i2) => {
        return this.card_sort(i1.initiative, i2.initiative);
      });

      return order;
    }

    draw_n: function(n) {
      const cards = this.draw_pile.take(n);
      cards.sort(this.card_sort);
      return cards;
    }

    draw: function(n) {
      const cards = this.draw_n(n);
      return cards[0];
    }
  }
}

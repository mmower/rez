%% <% _ = assigns %>
%% Autogenerated with Rez v<%= Rez.version() %>
%% ** Do not modify as local changes will be overwritten every time the game is compiled **

%% ----------------------------------------------------------------------------
%% Head Assets
%% ----------------------------------------------------------------------------

@asset _ALPINE_JS begin
  file_name: "alpinejs.min.js"
  defer: true
  pre_runtime: true
end

@asset _HANDLEBARS_JS begin
  file_name: "handlebars.min.js"
  defer: false
  pre_runtime: true
end

@asset _BULMA_CSS begin
  file_name: "bulma.min.css"
end

%% ----------------------------------------------------------------------------
%% JS Library Patches
%% ----------------------------------------------------------------------------

@patch OBJECT_COPY begin
  patch: "Object"
  method: "copy"
  impl: function() {
    const copy = {};
    for(const property in this) {
      let value = this[property];
      if(typeof(value) == "object") {
        copy[property] = value.copy();
      } else {
        copy[property] = value;
      }
    }
    return copy;
  }
end

@patch OBJECT_OBJ_MAP begin
  patch: "Object"
  method: "obj_map"
  impl: function(f) {
    const entries = Object.entries(this);
    const new_entries = entries.map(([k, v]) => [k, f(v)]);
    return Object.fromEntries(new_entries);
  }
end

@patch ARRAY_FY_SHUFFLE begin
  %% Fisher-Yates Shuffle impl from: https://sebhastian.com/fisher-yates-shuffle-javascript/
  patch: "Array"
  method: "fy_shuffle"
  impl: function() {
    let idx = this.length;
    while(--idx > 0) {
      const rand_idx = Math.floor(Math.random() * (idx+1));
      [this[rand_idx], this[idx]] = [this[idx], this[rand_idx]];
    }
    return this;
  }
end

@patch ARRAY_RANDOM_ELEMENT begin
  patch: "Array"
  method: "randomElement"
  impl: function() {
    return this.at(Math.floor(Math.random() * this.length));
  }
end

@patch ARRAY_RANDOM_INDEX begin
  patch: "Array"
  method: "randomIndex"
  impl: function() {
    return Math.floor(Math.random() * this.length);
  }
end

@patch ARRAY_FREQUENCIES begin
  patch: "Array"
  method: "frequencies"
  impl: function() {
    const freqs = new Map();
    for(const v of this) {
      let val = freqs.get(v);
      if(typeof(val) == "undefined") {
        val = 1;
      } else {
        val = val + 1;
      }
      freqs.set(v, val);
    }
    return freqs;
  }
end

@patch ARRAY_SUM begin
  patch: "Array"
  method: "sum"
  impl: function() {
    return this.reduce((a, b) => a+b, 0);
  }
end

@patch ARRAY_EQUALS begin
  patch: "Array"
  function: "equals"
  impl: function(a, b) {
    return Array.isArray(a) &&
        Array.isArray(b) &&
        a.length === b.length &&
        a.every((val, index) => val === b[index]);
  }
end

@patch STRING_INTERPOLATE begin
  patch: "String"
  method: "interpolate"
  impl: function(game) {
    return this;
  }
end

@patch STRING_TO_SNAKE_CASE begin
  patch: "String"
  method: "toSnakeCase"
  impl: function() {
      return this
      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
      .map(x => x.toLowerCase())
      .join('_');
  }
end

@patch STRING_PARSE_TIME begin
  patch: "String"
  method: "parseTime"
  impl: function() {
    const time_components = this.match( /(\d+)(?::(\d\d))?\s*(p?)/ );
    const hour_s = time_components[1];
    if(typeof(hour_s) == "undefined") {
      throw "Invalid time string (hour): '" + this + "'";
    }
    const hour = parseInt(hour_s);
    if(hour == NaN) {
      throw "Invalid time string (hour): '" + this + "'";
    }

    const mins_s = time_components[2];
    if(typeof(mins_s) == "undefined") {
      throw "Invalid time string (mins): '" + this + "'";
    }

    const mins = parseInt(mins_s);
    if(typeof(mins) == NaN) {
      throw "Invalid time string (mins): '" + this + "'";
    }

    return [hour, mins];
  }
end

@patch STRING_RANDOM_ID begin
  patch: "String"
  function: "randomId"
  impl: function() {
    const rand = window.crypto.getRandomValues(new Uint32Array(1))[0];
    return rand.toString(16);
  }
end

%% Some helpful set functions from:
%% https://medium.com/@alvaro.saburido/set-theory-for-arrays-in-es6-eb2f20a61848
%% https://stackoverflow.com/a/31129384/7518

@patch SET_UNION begin
  patch: "Set"
  method: "union"
  impl: function(otherSet) {
    return new Set([...this, ...otherSet]);
  }
end

@patch SET_INTERSECTION begin
  patch: "Set"
  method: "intersection"
  impl: function(otherSet) {
    return new Set([...this].filter(x => otherSet.has(x)));
  }
end

@patch SET_DIFFERENCE begin
  patch: "Set"
  method: "difference"
  impl: function(otherSet) {
    return new Set([...this].filter(x => !otherSet.has(x)));
  }
end

@patch SET_EQUALS begin
  patch: "Set"
  method: "equals"
  impl: function(otherSet) {
    return this.size === otherSet.size &&
    [...this].every((x) => otherSet.has(x));
  }
end

@patch SET_HAS_SUBSET begin
  patch: "Set"
  method: "hasSubset"
  impl: function(otherSet) {
    return this.intersection(otherSet).equals(otherSet);
  }
end

@patch NUMBER_RANGE begin
  patch: "Number"
  function: "range"
  impl: function(from, to, step) {
    step ??= 1

    if(from>to) {
      [from, to] = [to, from];
    }

    Array.from({
      length: (to-from)/step+1
    })

    const vals = [];
    for(let i = from; i<=to; i+=step) {
      vals.push(i);
    }

    return vals;
  }
end

%% ----------------------------------------------------------------------------
%% Handlebars Helpers
%% ----------------------------------------------------------------------------

@helper ATTR_HELPER begin
  %% The $attr helper is a shortcut for outputting the value of an attribute of a
  %% game object. Used as {{attr object "attr_name"}} it returns the attribute
  %% value and is often used with the binding: attribute.

  name: "attr"
  args: ["obj" "name"]
  handler: (obj, name) => {
    if(typeof(obj) == "undefined" || obj == null) {
      console.log("In $ object not found");
      return "";
    } else {
      const value = obj.getAttribute(name);
      if(typeof(value) == "undefined" || value == null) {
        throw "No attribute " + name + " of object " + obj.id + " could be found!";
      } else {
        return new Handlebars.SafeString(value);
      }
    }
  }
end

@helper EVENT_HELPER begin
  %% The {{event}} handler returns an <a> tag that, when the player clicks on it,
  %% sends the specified event to the enclosing card.

  name: "event"
  args: ["title" "event_name"]
  handler: (title, event_name) => {
    return new Handlebars.SafeString("<a href='javascript:void(0);' class='event' data-event='" + event_name + "'>" + title + "</a>");
  }
end

@helper LINK_HELPER begin
  %% The $link handler runs the dynamic link code for the specified card &
  %% action and either returns a link for taking that action, a deactivated
  %% link if the action is visible but not available, or an empty string if
  %% the action shouldn't be visible to the player.

  name: "link"
  args: ["card" "action"]
  handler: (card, action) => {
    let action_handler = card.attributes[action];
    if(action_handler == null) {
      throw "No action handler for '" + action + "' on card '" + card.id + "'!";
    } else if(typeof(action_handler) != "function") {
      throw "Attribute '" + action + "' of card '" + card.id + "' is not a handler function!";
    } else {
      let link = new RezDynamicLink(card);
      action_handler(link);
      if(!link.choosen) {
        throw new Error("Choice must call one of hide/deny/allow");
      }

      if(link.display) {
        return new Handlebars.SafeString(link.markup);
      } else {
        return "";
      }
    }
  }
end

@helper SCENE_SHIFT_HELPER begin
  %% The $shift helper transitions from one scene to another as part of the
  %% narrative.

  name: "shift"
  args: ["card" "scene_id" "title"]
  handler: (card, scene_id, title) => {
    const new_scene = card.$(scene_id);
    if(new_scene.game_object_type != "scene") {
      throw "Attempt to shift to scene with id '" + scene_id + "'. Is of type '" + new_scene.game_object_type + "'";
    } else {
      return new Handlebars.SafeString("<a href='javascript:void(0);' data-event='shift' data-target='" + scene_id + "'>" + title + "</a>")
    }
  }
end

@helper SCENE_INTERLUDE_HELPER begin
  %% The $interlude helper starts a new scene having prepared the way for the
  %% original scene to be rejoined at the end of the new scene.

  name: "interlude"
  args: ["card" "scene_id" "title"]
  handler: (card, scene_id, title) => {
    const new_scene = card.$(scene_id);
    if(new_scene.game_object_type != "scene") {
      throw "Attempt to interlude to scene with id '" + scene_id + "'. Is of type '" + new_scene.game_object_type + "'";
    } else {
      return new Handlebars.SafeString("<a href='javascript:void(0);' data-event='interlude' data-target='" + scene_id + "'>" + title + "</a>")
    }
  }
end

@helper SCENE_RESUME_HELPER begin
  %% The $resume helper returns an <a> tag that when clicked ends a scene
  %% interlude and resumes the previous scene at the point it was before the
  %% interlude began.

  name: "resume"
  args: ["title"]
  handler: (title) => {
    return new Handlebars.SafeString("<a href='javascript:void(0);' data-event='resume'>" + title + "</a>");
  }
end

@helper ASSET_TAG_HELPER begin
  %% The $atag helper returns a tag that embeds the file (be it image, movie,
  %% or audio) referenced by the asset.

  name: "atag"
  args: ["asset_id"]
  handler: (asset_id) => {
    const asset = $(asset_id);
    if(asset == null) {
      throw "Attempt to retrieve asset with id '" + asset_id + "' not found!";
    } else if(asset.game_object_type != "asset") {
      throw "Attempt to retrieve asset with id '" + asset_id + "' but found '" + asset.game_object_type + "'!";
    } else {
      return new Handlebars.SafeString(asset.tag());
    }
  }
end

@helper ASSET_PATH_HELPER begin
  %% The $apath helper returns the relative path from the HTML to the asset
  %% file of a given asset.

  name: "apath"
  args: ["asset_id"]
  handler: (asset_id) => {
    const asset = $(asset_id);
    return new Handlebars.SafeString(asset.path);
  }
end

%% ----------------------------------------------------------------------------
%% A scene that handles loading a game
%% ----------------------------------------------------------------------------

@scene default_load_game begin
    initial_card: #default_load_game_form
    layout: """
    {{{content}}}
    """
    layout_mode: :single
  end

@card default_load_game_form begin
  content: """
  <form name="load_form">
    <input type="file" name="data"/>
    <input type="submit"/>
  </form>
  """

  on_load_form: (card, data) => {
    console.log("In the load form handler!");
    const form = data.form;
    const file_input = form.querySelector("input[type=file]");
    const [file] = file_input.files;
    const reader = new FileReader();
    reader.addEventListener("load", function() {
      window.game.load(reader.result);
      window.game.render();
    });
    reader.readAsText(file);
  }
end

%% ----------------------------------------------------------------------------
%% Default Behaviour Tasks
%% ----------------------------------------------------------------------------

@system actor_behaviours begin
  enabled: true
  priority: 10
  on_tick: (event) => {
    console.log("Running actor_behaviours system");
    const game = event.game;
    const actors = game.getAll("actor").filter((actor) => {return actor.hasAttribute("behaviours")});
    const wmem = {};
    actors.forEach((actor) => {
      const btree = actor.getAttributeValue("behaviours");
      btree.execute(wmem);
    });
  }
end

%% Standard behaviours
%% By convention we give behaviours an UPPER CASE id to make it less likely
%% they will clash with author generated id's. The core of these behaviours
%% model the 'generic' behaviours implemented in the Crysis engine:
%% https://docs.cryengine.com/display/CEPROG/Modular+Behavior+Tree+Nodes
%% See the Behaviour Tree part of the user guide for more information.

@task SELECT begin
  %% The SELECT task executes it's children in turn until one of them
  %% succeeds, then SELECT succeeds. If no child succeeeds then SELECT fails.

  template: true
  options: []
  min_children: 2

  execute: (task, wmem) => {
    let result = {success: true, wmem: wmem};
    for(const child of task.children) {
      result = child.execute(result.wmem);
      if(result.success) {
        break;
      }
    }
    return result;
  }
end

@task SELECT_P begin
  %% The SELECT_P task is similar to SELECT except that before ticking any
  %% child it does a probability check using the "p" option. If the check passes
  %% it ticks the child, otherwise it moves on to the next child. If a child
  %% succeeds SELECT_P succeeds. If no child succeeds, SELECT_P fails.

  template: true
  options: [:p]
  min_children: 2

  configure: (task) => {
    const p = task.intOption("p");
    if(p < 0 || p > 100) {
      throw "Task: " + task.id + " invalid 'p' option specified.";
    }
  }

  execute: (task, wmem) => {
    const p = task.intOption("p");
    const die = new RezDie(1, 100, 0);
    let result = {success: false, id: task.id, wmem};
    for(const child of task.children) {
      if(die.roll() < p) {
        result = child.execute(result.wmem);
        if(result.success) {
          break;
        }
      }
    }
    return result;
  }
end

@task SEQUENCE begin
  %% The SEQUENCE task executes its children in turn. If they all succeed
  %% then the SEQUENCE succeeds. If a child fails the SEQUENCE fails and does
  %% not execute any further children.

  template: true
  options: []
  min_children: 2

  execute: (task, wmem) => {
    let result = {success: true, wmem: wmem};
    for(const child of task.children) {
      result = child.tick(result.wmem);
      if(result.success) {
        break;
      }
    }
  }
end

@task LOOP begin
  %% The LOOP task takes one child and executes it 'count' times. If it
  %% succeeds on every repetition the LOOP succeeds. If the child ever fails
  %% the LOOP fails.

  template: true
  options: [:count]
  min_children: 1
  max_children: 1

  execute: (task, wmem) => {
    const count = task.option("count");
    let result = {success: false, wmem: wmem};
    for(const i=0; i<count; i++) {
      result = child.execute(result.wmem);
      if(!result.success) {
        return result;
      }
    }

    return result;
  }
end

@task LOOP_UNTIL begin
  %% The LOOP_UNTIL task takes one child and executes it until it
  %% succeeds. The 'attempts' option specifies how many times it will
  %% executed. If the child ever succeeds, LOOP_UNTIL succeeds. If the
  %% child doesn't succeed in the number of attempts then LOOP_UNTIL fails.

  template: true
  options: [:attempts]
  min_children: 1
  max_children: 1

  execute: (task, wmem) => {
    let result = {success: false, wmem: wmem};
    for(let i=0; i<this.count(); i++) {
      result = this.firstChild().tick(result.db);
      if(tick_succeeded(result)) {
        break;
      }
    }

    return result;
  }
end

@task MAYBE begin
  %% The MAYBE task takes one child and based on the option "p" determines
  %% whether to execute it or not. If it executes the child then MAYBE succeeds
  %% if the child succeeds or fails if the child fails. If it doesn't execute
  %% the child then MAYBE fails.

  template: true
  options: [:p]
  min_children: 1
  max_children: 1

  execute: (task, wmem) => {
    const p = task.option("p");
    const die = new RezDie(1, 100, 0);

    if(die.roll() < p) {
      return task.firstChild().execute(wmem);
    } else {
      return {success: false, id: task.id, error: "Didn't execute"};
    }
  }
end

@task EITHER begin
  %% The EITHER task takes two children and based on the probability
  %% option "p" determines whether to execute the first or second child.
  %% Having decided which child to execute EITHER succeeds or fails based
  %% on whether the selected child succeeds or fails.

  template: true
  options: [:p]
  min_children: 2
  max_children: 2

  execute: (task, wmem) => {
    const p = task.option("p");
    const die = new RezDie(1, 100, 0);
    const roll = die.roll();

    if(roll < p) {
      return task.firstChild().execute(wmem);
    } else {
      return task.secondChild().execute(wmem);
    }
  }
end

@task RANDOM_CHOICE begin
  %% The RANDOM_CHOICE task takes two or more children. When RANDOM_CHOICE
  %% executes it selects a child at random and executes it. If that child
  %% succeeds then RANDOM_CHOICE succeeds, otherwise it fails.

  template: true
  options: []
  min_children: 2

  execute: (task, wmem) => {
    const die = new RezDie(1, task.childCount(), 0);
    const child = task.getChild(die.roll());
    return child.execute(wmem);
  }
end

@task RANDOM_EACH begin
  %% The RANDOM_EACH task takes two or more children. When RANDOM_EACH
  %% executes it selects a child, without replacement, and executes it. If
  %% the selected child succeeds then RANDOM_EACH succeeds, otherwise it
  %% fails. Without replacement means that no child can be selected twice
  %% until all children have been selected at least once.

  template: true
  options: []
  min_children: 2

  execute: (task, wmem) => {
    let child_walk = wmem[this];

    if(typeof(child_walk) == "undefined" || child_walk.length == 0) {
      child_walk = Array.from(Array(task.childCount()).keys()).shuffle();
    }

    const child = child_walk.shift();
    wmem[this] = child_walk;

    return child.execute(wmem);
  }
end

@task ALWAYS begin
  %% The ALWAYS task takes one child and executes it, ALWAYS succeeds
  %% regardless of whether the child succeeds.

  template: true
  options: []
  min_children: 1
  max_children: 1

  execute: (task, wmem) => {
    const result = this.firstChild().execute(wmem);
    result.success = true;
    return result;
  }
end

@task NEVER begin
  %% The NEVER task takes one child and executes it, NEVER fails regardless
  %% of whether the child fails.

  template: true
  options: []
  min_children: 1
  max_children: 1

  execute: (task, wmem) => {
    const result = task.firstChild().execute(wmem);
    result.success = false;
    return result;
  }
end

@task INVERT begin
  %% The INVERT task takes one child and executes it. If the child succeeds
  %% then INVERT will fail. If the child fails then INVERT will succeed.

  template: true
  options: []
  min_children: 1
  max_children: 1

  execute: (task, wmem) => {
    const result = this.firstChild().execute(wmem);
    if(result.success) {
      result.success = false;
      result.error = "Inversion";
      result.id = task.id;
    } else {
      result.success = true;
    }
  }
end

@task FAIL begin
  %% The FAIL task automatically fails.

  template: true
  options: []
  max_children: 0

  execute: (task, wmem) => {
    return {success: false, wmem: wmem};
  }
end

@task SUCCEED begin
  %% The SUCCEED task automatically succeeds.

  template: true
  options: []
  max_children: 0

  execute: (task, wmem) => {
    return {success: true, wmem: wmem};
  }
end

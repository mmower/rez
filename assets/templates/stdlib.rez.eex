%% <% _ = assigns %>
%% Autogenerated with Rez v<%= Rez.version() %>
%% ** Do not modify as local changes will be overwritten every time the game is compiled **

%% ----------------------------------------------------------------------------
%% Defaults
%% ----------------------------------------------------------------------------

@defaults actor {
  tags: #{}
}

@defaults asset {
  tags: #{}
}

@defaults card {
  $flipped: false
  $suppress_wrapper: false
  tags: #{}
}

@defaults faction {
  tags: #{}
}

@defaults inventory {
  tags: #{}
}

@defaults item {
  tags: #{}
}

@defaults list {
  $cycles: {}
  $bags: {}
  $walks: {}
  tags: #{}
}

@defaults plot {
  tags: #{}
  active: false
  stage: 0
}

@defaults rel {
  tags: #{}
}

@defaults scene {
  layout_mode: :single
  layout_reverse: false
  layout_separator: ""
  layout: ```${content}```
  tags: #{}
}

@defaults slot {
  apply_effects: true
  tags: #{}
}

@defaults system {
  tags: #{}
}

%% ----------------------------------------------------------------------------
%% Head Assets
%% ----------------------------------------------------------------------------

@asset _ALPINE_JS {
  $built_in: true
  file_name: "alpinejs.min.js"
  $js_defer: true
  $pre_runtime: true
}

@asset _BULMA_CSS {
  $built_in: true
  file_name: "bulma.min.css"
}

@asset _PLURALIZE_JS {
  $built_in: true
  file_name: "pluralize.js"
  $js_defer: false
  $pre_runtime: true
}

@asset _TRACERY_JS {
  $built_in: true
  file_name: "tracery.js"
  $js_defer: false
  $pre_runtime: true
}

%% ----------------------------------------------------------------------------
%% JS Library Patches
%% ----------------------------------------------------------------------------

@script {
  function isObject(obj) {
    return obj !== null && typeof obj === "object" && Object.prototype.toString.call(obj) === "[object Object]";
  }
}

@patch PATCH_BOOLEAN_RAND {
  $built_in: true
  patch: "Boolean"
  function: "rand"
  impl: function() {
    return Math.random() < 0.5 ? true : false;
  }
}

@patch PATCH_OBJECT_DEEP_COPY {
  $built_in: true
  patch: "Object"
  method: "copy"
  impl: function() {
    // Handle null or undefined
    if (this === null || typeof this === 'undefined') {
        return this;
    }

    if(this instanceof Set) {
      return new Set([...this]);
    }

    // Handle array
    if (Array.isArray(this)) {
        const copiedArr = [];
        for (let i = 0; i < this.length; i++) {
            copiedArr[i] = this[i].copy();
        }
        return copiedArr;
    }

    // Handle object
    if (typeof this === 'object') {
        const copiedObj = {};
        for (const key in this) {
            if (this.hasOwnProperty(key)) {
                copiedObj[key] = this[key].copy();
            }
        }
        return copiedObj;
    }

    // Handle other primitive types (e.g., string, number, etc.)
    return this;
  }
}

@patch PATCH_OBJECT_OBJ_MAP {
  $built_in: true
  patch: "Object"
  method: "obj_map"
  impl: function(f) {
    const entries = Object.entries(this);
    const new_entries = entries.map(([k, v]) => [k, f(v, k)]);
    return Object.fromEntries(new_entries);
  }
}

@patch PATCH_OBJECT_DQ_WRAP {
  $built_in: true
  patch: "Object"
  method: "dq_wrap"
  impl: function() {
    return "\"" + this + "\"";
  }
}

@patch PATCH_ARRAY_MAX {
  $built_in: true
  patch: "Array"
  method: "max"
  impl: function() {
    if(this.length === 0) {
      throw new Error("Cannot get the max of an empty array!");
    }

    return this.reduce((a, b) => Math.max(a, b));
  }
}

@patch PATCH_ARRAY_MIN {
  $built_in: true
  patch: "Array"
  method: "min"
  impl: function() {
    if(this.length === 0) {
      throw new Error("Cannot get the min of an empty array!");
    }

    return this.reduce((a, b) => Math.min(a, b));
  }
}

@patch PATCH_ARRAY_ENGLISH_LIST {
  $built_in: true
  patch: "Array"
  method: "englishList"
  impl: function() {
    const length = this.length;
    if (length === 0) {
        return "";
    } else if (length === 1) {
        return this[0];
    } else if (length === 2) {
        return this.join(" and ");
    } else {
        return this.slice(0, -1).join(", ") + ", and " + this[length - 1];
    }
  }
}

@patch PATCH_ARRAY_REMOVE {
  $built_in: true
  patch: "Array"
  method: "remove"
  impl: function(elem) {
    const idx = this.indexOf(elem);
    if(idx !== -1) {
      this.splice(idx, 1);
    }
  }
}

@patch PATCH_ARRAY_FY_SHUFFLE {
  $built_in: true
  %% Fisher-Yates Shuffle impl from: https://sebhastian.com/fisher-yates-shuffle-javascript/
  patch: "Array"
  method: "fy_shuffle"
  impl: function() {
    let idx = this.length;
    while(--idx > 0) {
      const rand_idx = Math.floor(Math.random() * (idx+1));
      [this[rand_idx], this[idx]] = [this[idx], this[rand_idx]];
    }
    return this;
  }
}

@patch PATCH_ARRAY_RANDOM_ELEMENT {
  $built_in: true
  patch: "Array"
  method: "randomElement"
  impl: function() {
    return this.at(Math.floor(Math.random() * this.length));
  }
}

@patch PATCH_ARRAY_RANDOM_INDEX {
  $built_in: true
  patch: "Array"
  method: "randomIndex"
  impl: function() {
    return Math.floor(Math.random() * this.length);
  }
}

@patch PATCH_ARRAY_FREQUENCIES {
  $built_in: true
  patch: "Array"
  method: "frequencies"
  impl: function() {
    const freqs = new Map();
    for(const v of this) {
      let val = freqs.get(v);
      if(typeof(val) == "undefined") {
        val = 1;
      } else {
        val = val + 1;
      }
      freqs.set(v, val);
    }
    return freqs;
  }
}

@patch PATCH_ARRAY_SUM {
  $built_in: true
  patch: "Array"
  method: "sum"
  impl: function() {
    return this.reduce((a, b) => a+b, 0);
  }
}

@patch PATCH_ARRAY_EQUALS {
  $built_in: true
  patch: "Array"
  function: "equals"
  impl: function(a, b) {
    return Array.isArray(a) &&
        Array.isArray(b) &&
        a.length === b.length &&
        a.every((val, index) => val === b[index]);
  }
}

@patch PATCH_ARRAY_STARTS_WITH_SEQUENCE {
  $built_in: true
  patch: "Array"
  method: "startsWithSequence"
  impl: function(sequence) {
    return this.slice(0, sequence.length).every((value, index) => value === sequence[index]);
  }
}

@patch PATCH_ARRAY_PAIRS {
  $built_in: true
  patch: "Array"
  method: "to_pairs"
  impl: function() {
    let pairs = [];
    for(let i = 0; i < this.length; i += 2) {
      if(this[i + 1] !== undefined) {
        pairs.push([this[i], this[i + 1]]);
      }
    }
    return pairs;
  }
}

@patch PATCH_ARRAY_TAKE {
  $built_in: true
  patch: "Array"
  method: "take"
  impl: function(n) {
    if(this.length < n) {
      throw `Cannot take ${n} items from an array containing ${this.length} items!`;
    }

    return Math.range(1, n).map((_) => {return this.shift()});
  }
}

@patch PATCH_ARRAY_REFS {
  $built_in: true
  patch: "Array"
  method: "refs"
  impl: function() {
    return this.map((id) => $(id));
  }
}

@patch PATCH_ARRAY_IDS {
  $built_in: true
  patch: "Array"
  method: "ids"
  impl: function() {
    return this.map((obj) => obj.id);
  }
}

@patch PATCH_ARRAY_N_OF {
  $built_in: true
  patch: "Array"
  function: "n_of"
  impl: function(length, def_value) {
    if(typeof(def_value) === "function") {
      return Array.from({length: length}, def_value);
    } else {
      return Array.from({length: length}, () => def_value);
    }
  }
}

@patch PATCH_ARRAY_SAMPLE {
  $built_in: true
  patch: "Array"
  method: "sample"
  impl: function(percentage) {
    if (!Array.isArray(this) || this.length === 0 || percentage <= 0) {
      return []; // Return an empty array for invalid input
    }

    const sampleSize = Math.ceil(this.length * (percentage / 100));
    const result = [];
    const indicesUsed = new Set();

    while (result.length < sampleSize && indicesUsed.size < this.length) {
      const randomIndex = Math.floor(Math.random() * this.length);
      if (!indicesUsed.has(randomIndex)) {
        indicesUsed.add(randomIndex);
        result.push(this[randomIndex]);
      }
    }

    return result;
  }
}

@patch PATCH_ARRAY_ZIP {
  $built_in: true
  patch: "Array"
  function: "zip"
  impl: function(ar1, ar2) {
    return ar1.map((value, idx) => [value, ar2[idx]]);
  }
}

@patch PATCH_STRING_BEGINS_WITH_CONSONANT {
  $built_in: true
  patch: "String"
  method: "beginsWithConsonant"
  impl: function() {
    return /^[^aeiouAEIOU]/.test(this);
  }
}

@patch PATCH_STRING_BEGINS_WITH_VOWEL {
  $built_in: true
  patch: "String"
  method: "beginsWithVowel"
  impl: function() {
    return /^[aeiouAEIOU]/.test(string);
  }
}

@patch PATCH_STRING_CAPITALIZE {
  $built_in: true
  patch: "String"
  method: "capitalize"
  impl: function(s) {
    return this.replace(/(^|\s)\S/g, l => l.toUpperCase());
  }
}

@patch PATCH_STRING_INTERPOLATE {
  $built_in: true
  patch: "String"
  method: "interpolate"
  impl: function(game) {
    return this;
  }
}

@patch PATCH_STRING_POSSESSIVE {
  $built_in: true
  patch: "String"
  method: "possessive"
  impl: function() {
    if(this.endsWith("s")) {
      return this + "'";
    } else {
      return this + "'s";
    }
  }
}

@patch PATCH_STRING_CAMELIZE {
  $built_in: true
  patch: "String"
  method: "camelize"
  impl: function() {
    return this.replace(/[_.-](\w|$)/g, function (_, x) {
	  	return x.toUpperCase();
	  });
  }
}

@patch PATCH_STRING_SNAKE_TO_KEBAB_CASE {
  $built_in: true
  patch: "String"
  method: "snakeToKebabCase"
  impl: function() {
    return this.replace(/_/g, "-");
  }
}

@patch PATCH_STRING_KEBEB_TO_SNAKE_CASE {
  $built_in: true
  patch: "String"
  method: "kebabToSnakeCase"
  impl: function() {
    return this.replace(/-/g, "_");
  }
}

@patch PATCH_STRING_TO_SNAKE_CASE {
  $built_in: true
  patch: "String"
  method: "toSnakeCase"
  impl: function() {
      return this
      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
      .map(x => x.toLowerCase())
      .join('_');
  }
}

@patch PATCH_STRING_PARSE_TIME {
  $built_in: true
  patch: "String"
  method: "parseTime"
  impl: function() {
    const time_components = this.match( /(\d+)(?::(\d\d))?\s*(p?)/ );
    const hour_s = time_components[1];
    if(typeof(hour_s) == "undefined") {
      throw "Invalid time string (hour): '" + this + "'";
    }
    const hour = parseInt(hour_s);
    if(hour == NaN) {
      throw "Invalid time string (hour): '" + this + "'";
    }

    const mins_s = time_components[2];
    if(typeof(mins_s) == "undefined") {
      throw "Invalid time string (mins): '" + this + "'";
    }

    const mins = parseInt(mins_s);
    if(typeof(mins) == NaN) {
      throw "Invalid time string (mins): '" + this + "'";
    }

    return [hour, mins];
  }
}

@patch PATCH_STRING_RANDOM_ID {
  $built_in: true
  patch: "String"
  function: "randomId"
  impl: function() {
    const rand = window.crypto.getRandomValues(new Uint32Array(1))[0];
    return rand.toString(16);
  }
}

@patch PATCH_STRING_WRAP_WITH {
  $built_in: true
  patch: "String"
  method: "wrapWith"
  impl: function(prefix, suffix) {
    return prefix + this + suffix;
  }
}

@patch PATCH_STRING_INDEFINITE_ARTICLE {
  $built_in: true
  patch: "String"
  method: "indefiniteArticle"
  impl: function() {
    return this.beginsWithConsonant() ? "a" : "an";
  }
}

%% Some helpful set functions from:
%% https://medium.com/@alvaro.saburido/set-theory-for-arrays-in-es6-eb2f20a61848
%% https://stackoverflow.com/a/31129384/7518

@patch PATCH_SET_UNION {
  $built_in: true
  patch: "Set"
  method: "union"
  impl: function(otherSet) {
    return new Set([...this, ...otherSet]);
  }
}

@patch PATCH_SET_INTERSECTION {
  $built_in: true
  patch: "Set"
  method: "intersection"
  impl: function(otherSet) {
    return new Set([...this].filter(x => otherSet.has(x)));
  }
}

@patch PATCH_SET_DIFFERENCE {
  $built_in: true
  patch: "Set"
  method: "difference"
  impl: function(otherSet) {
    return new Set([...this].filter(x => !otherSet.has(x)));
  }
}

@patch PATCH_SET_EQUALS {
  $built_in: true
  patch: "Set"
  method: "equals"
  impl: function(otherSet) {
    return this.size === otherSet.size &&
    [...this].every((x) => otherSet.has(x));
  }
}

@patch PATCH_SET_HAS_SUBSET {
  $built_in: true
  patch: "Set"
  method: "hasSubset"
  impl: function(otherSet) {
    return this.intersection(otherSet).equals(otherSet);
  }
}

@patch PATCH_NUMBER_ORDINAL {
  $built_in: true
  patch: "Number"
  method: "ordinal"
  impl: function() {
    const lastDigit = this % 10;
    const secondLastDigit = Math.floor((this % 100) / 10);

    if (lastDigit === 1 && secondLastDigit !== 1) {
      return this + 'st';
    } else if (lastDigit === 2 && secondLastDigit !== 1) {
      return this + 'nd';
    } else if (lastDigit === 3 && secondLastDigit !== 1) {
      return this + 'rd';
    } else {
      return this + 'th';
    }
  }
}

@patch PATCH_NUMBER_ROUNDP {
  $built_in: true
  %% https://stackoverflow.com/questions/7342957/how-do-you-round-to-1-decimal-place-in-javascript
  patch: "Number"
  method: "roundp"
  impl: function(precision) {
    var multiplier = Math.pow(10, precision || 0);
    return Math.round(this * multiplier) / multiplier;
  }
}

@patch PATCH_NUMBER_CL_AVG {
  $built_in: true
  patch: "Number"
  method: "cl_avg"
  impl: function(rounds) {
    rounds ??= 2;
    const f = Math.random() < 0.5 ? Math.ceil : Math.floor;
    return f(this/rounds);
  }
}

@patch PATCH_NUMBER_ROUND_TO_NEAREST_HALF {
  $built_in: true
  %% rounds a number to the nearest 0.5
  patch: "Number"
  method: "r2nh"
  impl: function() {
    return Math.round(this * 2) / 2;
  }
}

@patch PATCH_NUMBER_DIST_ROUND {
  $built_in: true
  patch: "Number"
  method: "dist_round"
  impl: function() {
    return Math.dist_round(this);
  }
}

@patch PATCH_NUMBER_ROUND_TO_NEAREST {
  $built_in: true
  patch: "Number"
  method: "round_to_nearest"
  impl: function(n) {
    if(n === 0) {
      return this;
    } else {
      return Math.round(this / n) * n;
    }
  }
}

@patch PATCH_NUMBER_TIMES {
  $built_in: true
  patch: "Number"
  method: "times"
  impl: function(f) {
    for(let ix = 0; ix < this; ix++) {
      f();
    }
  }
}

@patch PATCH_MATH_PERC {
  $built_in: true
  patch: "Math"
  function: "perc"
  impl: function(p) {
    return Math.random() <= (p/100);
  }
}

@patch PATH_MATH_DIV {
  $built_in: true
  patch: "Math"
  function: "div"
  impl: function(n, d) {
    return Math.floor(n/d);
  }
}

@patch PATCH_MATH_DIVMOD {
  $built_in: true
  patch: "Math"
  function: "div_mod"
  impl: function(n, d) {
    const div = Math.floor(n/d);
    const mod = n % d;
    return [div, mod];
  }
}

@patch PATCH_MATH_RANGE {
  $built_in: true
  patch: "Math"
  function: "range"
  impl: function(from, to, step) {
    step ??= 1;

    if(from>to) {
      [from, to] = [to, from];
    }

    return Array.from(
      {length: (to-from)/step+1},
      (_, i) => from + (i * step));
  }
}

@patch PATCH_MATH_DIST_ROUND {
  $built_in: true
  %% Because JS only gives us random numbers as floating point we sometimes
  %% end up having to round when we want an. The question is whether we round
  %% up or round down which can create a bias. The dist_round function randomly
  %% round up or down to distribute values evenly.
  patch: "Math"
  function: "dist_round"
  impl: function(v) {
    if(Math.random() < 0.5) {
      return Math.ceil(v);
    } else {
      return Math.floor(v);
    }
  }
}

@patch PATCH_MATH_RAND_INT {
  $built_in: true
  patch: "Math"
  function: "rand_int"
  impl: function(lim) {
    return Math.floor(Math.random() * lim);
  }
}

@patch PATCH_MATH_RND_INT_BETWEEN {
  $built_in: true
  patch: "Math"
  function: "rand_int_between"
  impl: function(min, max) {
    if(min > max) {
      [min, max] = [max, min]
    }
    return Math.floor(min + Math.random() * (max - min + 1));
  }
}

@patch PATCH_MATH_RAND_F_BETWEEN {
  $built_in: true
  patch: "Math"
  function: "rand_f_between"
  impl: function(min, max) {
    if(min > max) {
      [min, max] = [max, min]
    }

    return min + (Math.random() * (max - min));
  }
}

@patch PATCH_MATH_CL_RAND_F_BETWEEN {
  $built_in: true
  patch: "Math"
  function: "cl_rand_f_between"
  impl: function(min, max, rounds) {
    rounds = rounds ?? 2;
    let total = 0;
    for(let i = 0; i < rounds; i+= 1) {
      total += Math.rand_f_between(min, max);
    }
    return total/rounds;
  }
}

@patch PATCH_MATH_CL_RAND_INT {
  $built_in: true
  patch: "Math"
  function: "cl_rand_int"
  impl: function(lim) {
    const v1 = Math.rand_int(lim);
    const v2 = Math.rand_int(lim);
    return (v1+v2)/2;
  }
}

@patch PATCH_MATH_CLRAND_INT_BETWEEN {
  $built_in: true
  patch: "Math"
  function: "cl_rand_int_between"
  impl: function(lo, hi) {
    const v1 = Math.rand_int_between(lo, hi);
    const v2 = Math.rand_int_between(lo, hi);
    return Math.dist_round((v1+v2)/2);
  }
}

@patch PATCH_MATH_CLAMPED_SUB {
  $built_in: true
  patch: "Math"
  function: "clamped_sub"
  impl: function(value, sub, min) {
    return Math.max(value-sub, min);
  }
}

@patch PATCH_MATH_CLAMPED_ADD {
  $built_in: true
  patch: "Math"
  function: "clamped_add"
  impl: function(value, add, max) {
    return Math.min(value+add, max);
  }
}

%% ----------------------------------------------------------------------------
%% Template Filters
%% ----------------------------------------------------------------------------

@filter COMPARE_EQ_FILTER {
  $built_in: true

  %% v -> v -> bool
  name: "eq"
  impl: (v1, v2) => {return v1 === v2;}
}

@filter COMPARE_NE_FILTER {
  $built_in: true

  %% v -> v -> bool
  name: "ne"
  impl: (v1, v2) => {return !(v1 === v2);}
}

@filter COMPARE_GT_FILTER {
  $built_in: true

  %% n -> n -> bool
  name: "gt"
  impl: (n1, n2) => {return n1 > n2;}
}

@filter COMPARE_GTE_FILTER {
  $built_in: true

  %% n -> n -> bool
  name: "gte"
  impl: (n1, n2) => {return n1 >= n2;}
}

@filter COMPARE_LT_FILTER {
  $built_in: true

  %% n -> n -> bool
  name: "lt"
  impl: (n1, n2) => {return n1 < n2;}
}

@filter COMPARE_LTE_FILTER {
  $built_in: true

  %% n -> n -> bool
  name: "lte"
  impl: (n1, n2) => {return n1 <= n2;}
}

@filter BSEL_FILTER {
  $built_in: true

  %% bool -> array -> any
  name: "bsel"
  impl: (sel, options) => {return options[sel ? 0 : 1];}
}

@filter SEL_FILTER {
  $built_in: true

  %% n -> array -> any
  name: "sel"
  impl: (idx, options) => {return options[idx];}
}

@filter ADD_FILTER {
  $built_in: true

  %% n -> n
  name: "add"
  impl: (n, x) => {return n+x;}
}

@filter SUB_FILTER {
  $built_in: true

  %% n -> n
  name: "sub"
  impl: (n, x) => {return n-x;}
}

@filter MUL_FILTER {
  $built_in: true

  %% n -> n
  name: "mul"
  impl: (n, x) => {return n*x;}
}

@filter DIV_FILTER {
  $built_in: true

  %% n -> n
  name: "div"
  impl: (n, x) => {return n/x;}
}

@filter MOD_FILTER {
  $built_in: true

  %% n -> n
  name: "mod"
  impl: (n, x) => {return n % x;}
}

@filter ABS_FILTER {
  $built_in: true

  %% n -> n
  name: "abs"
  impl: (n) => {return Math.abs(n)}
}

@filter NEG_FILTER {
  $built_in: true

  %% n -> n
  name: "neg"
  impl: (n) => {return -n;}
}

@filter INC_FILTER {
  $built_in: true

  %% n -> n
  name: "inc"
  impl: (n) => {return n+1;}
}

@filter DEC_FILTER {
  $built_in: true

  %% n -> n
  name: "dec"
  impl: (n) => {return n-1;}
}

@filter ROUND_FILTER {
  $built_in: true

  %% n -> n
  name: "round"
  impl: (n, dp) => {return n.roundp(dp);}
}

@filter STRING_CHAR_AT_FILTER {
  $built_in: true

  %% String -> String
  name: "char_at"
  impl: (s, i) => {return s.charAt(i);}
}

@filter STRING_MAKE_FILTER {
  $built_in: true

  %% any -> String
  name: "string"
  impl: (s) => {return ""+s;}
}

@filter STRING_APPEND_FILTER {
  $built_in: true

  %% String -> String
  name: "append"
  impl: (s, t) => {return s + t;}
}

@filter STRING_CAMELIZE_FILTER {
  $built_in: true

  %% String -> String
  name: "camelize"
  impl: (s) => {return s.camelize();}
}

@filter STRING_TRIM_FILTER {
  $built_in: true

  %% String -> String
  %% ${"  Foo  " | trim} = "foo"
  name: "trim"
  impl: (s) => {return s.trim();}
}

@filter STRING_CAPITALIZE_FILTER {
  $built_in: true

  %% String -> String
  name: "capitalize"
  impl: (s) => {return s.capitalize();}
}

@filter STRING_DOWNCASE_FILTER {
  $built_in: true

  %% String -> String
  name: "downcase"
  impl: (s) => {return s.toLowerCase();}
}

@filter STRING_PREPEND_FILTER {
  $built_in: true

  %% String -> String
  name: "prepend"
  impl: (s, t) => {return t + s;}
}

@filter STRING_UPCASE_FILTER {
  $built_in: true

  %% String -> String
  name: "upcase"
  impl: (s) => {return s.toUpperCase();}
}

@filter STRING_PLURALIZE_FILTER {
  $built_in: true

  %% String -> String
  name: "pluralize"
  impl: (s) => {return pluralize(s);}
}

@filter STRING_POSSESSIVE_FILTER {
  $built_in: true

  %% String -> String
  name: "possessive"
  impl: (s) => {return s.possessive();}
}

@filter STRING_SPLIT_FILTER {
  $built_in: true

  %% String -> Array
  name: "split"
  impl: (s, p) => {return s.split(p);}
}

@filter STRING_STARTS_WITH_FILTER {
  $built_in: true

  %% String -> Bool
  name: "starts_with"
  impl: (s, search) => {return s.startsWith(search);}
}

@filter STRING_ENDS_WITH_FILTER {
  $built_in: true

  %% String -> Bool
  name: "ends_with"
  impl: (s, search) => {return s.endsWith(search);}
}

@filter STRING_CONTAINS_FILTER {
  $built_in: true

  %% String -> Bool
  name: "contains"
  impl: (s, search) => {return s.includes(search);}
}

@filter STRING_QUOTED_FILTER {
  $built_in: true

  %% String -> String
  name: "quoted"
  impl: (s) => {return `'${s}'`;}
}

@filter STRING_DOUBLE_QUOTED_FILTER {
  $built_in: true

  %% String -> String
  name: "dquoted"
  impl: (s) => {return `"${s}"`;}
}

@filter STRING_INDEFINITE_ARTICLE_FILTER {
  $built_in: true

  %% String -> String
  name: "i_article"
  impl: (s) => {
    const article = s.indefiniteArticle();
    return `${article} ${s}`;
  }
}

@filter ARRAY_LENGTH_FILTER {
  $built_in: true

  %% Array -> Integer
  name: "length"
  impl: (arr) => {return arr.length;}
}

@filter ARRAY_TAKE_FILTER {
  $built_in: true

  %% Array, n -> Array
  name: "take"
  impl: (arr, n) => {return arr.take(n);}
}

%% Most of the following filters have been superceded either by the revised
%% link syntax, or components.

@filter EVENT_LINK_FILTER {
  $built_in: true

  %% String -> Link
  %% ${<Title> | event: <event-id>}
  %% ${"Go here" | event: "fudge"}

  name: "event"
  impl: (event, title) => {
    return "<a href='javascript:void(0);' class='event' data-event='" + event + "'>" + title + "</a>";
  }
}

@filter DYN_LINK_FILTER {
  $built_in: true

  %% ${card | dyn_link: <action>}
  %% ${card | dyn_link: "can_attack"}
  name: "dyn_link"
  impl: (card, action) => {
    const link_handler = card.getAttribute(action);
    if(typeof(link_handler) != "function") {
      throw `Attribute |${action}| of card |${card.id}| is not a handler function!`;
    } else {
      let link = new RezDynamicLink(card);
      link_handler(link);
      if(!link.choosen) {
        throw new Error("Choice must call one of hide/deny/allow!");
      }
      if(link.display) {
        return link.markup;
      } else {
        return "";
      }
    }
  }
}

@filter RENDER {
  $built_in: true

  %% Template, View -> String

  %% The render filter bends the renderer to allow inline rendering of templates
  %% it depends upon the $block binding that makes the view available to rendering
  %% blocks. You pass (template, $block) and it will treat the template as a block
  %% with the current block as parents (ergo all parent bindings are available
  %% to the rendering block).

  name: "render"
  impl: (source_obj, attribute, parent_block) => {
    const template = source_obj.getAttribute(attribute);
    if(typeof(template) === "undefined") {
      throw `Unable to render ${attribute} of ${source_obj.id} as it is not defined`;
    } else if(typeof(template) === "string") {
      return template;
    } else {
      const render_source = new RezSyntheticSource(template);
      const sub_block = new RezBlock("block", render_source);
      sub_block.parent_block = parent_block;
      return sub_block.renderBlock();
    }
  }
}

@filter CARD_LINK_FILTER {
  $built_in: true

  name: "card_link"
  impl: (card_id, title, css_class) => {
    css_class = css_class ?? "";
    return `<a href="javascript:void(0);" class="${css_class}" data-event="card" data-target="${card_id}">${title}</a>`;
  }
}

@filter SCENE_SWITCH_FILTER {
  $built_in: true

  %% ${card | scene_switch: <scene_id>, <title>}
  %% ${card | scene_switch: "new_scene_id", "Action leading to a new scene"}

  name: "scene_switch"
  impl: (card, scene_id, title) => {
    return "<a href='javascript:void(0);' data-event='switch' data-target='" + scene_id + "'>" + title + "</a>";
  }
}

@filter SCENE_INTERLUDE_FILTER {
  $built_in: true

  %% ${card | scene_interlude: <scene_id>, <title>}
  %% ${card | scene_interlude: "new_scene_id", "Action leading to a scene interrupt"}

  name: "scene_interlude"
  impl: (card, scene_id, title) => {
    return "<a href='javascript:void(0);' data-event='interlude' data-target='" + scene_id + "'>" + title + "</a>";
  }
}

@filter SCENE_RESUME_FILTER {
  $built_in: true

  %% ${card | scene_resume: <title>}
  %% ${card | scene_resume "Back to game"}

  name: "scene_resume"
  impl: (title) => {
    return "<a href='javascript:void(0);' data-event='resume'>" + title + "</a>";
  }
}

@filter ASSET_TAG_FILTER {
  $built_in: true

  %% ${asset_id | asset_tag}

  name: "asset_tag"
  impl: (asset_id) => {
    const asset = $(asset_id);
    if(asset == null) {
      throw new Error(`Attempt to retrieve unknown asset |${asset_id}|!`);
    } else if(asset.type != "asset") {
      throw new Error(`Attempt to retrieve asset |${asset_id}| but found ${asset.type}`);
    } else {
      return asset.tag();
    }
  }
}

@filter ASSET_PATH_FILTER {
  $built_in: true

  %% ${asset_id | asset_path}
  %% ${"image_01" | asset_path}

  name: "asset_path"
  impl: (asset_id) => {
    const asset = $(asset_id);
    if(asset == null) {
      throw new Error(`Attempt to retrieve unknown asset |${asset_id}|!`);
    } else if(asset.type != "asset") {
      throw new Error(`Attempt to retrieve asset |${asset_id}| but found ${asset.type}`);
    } else {
      return asset.path;
    }
  }
}

%% ----------------------------------------------------------------------------
%% Useful components
%% ----------------------------------------------------------------------------

@component embed_card (bindings, assigns, content) => {
  let blockSource;
  if(typeof(assigns.card) === "string") {
    // We expect the id of a card
    blockSource = $t(assigns.card, "card", true);
  } else if(typeof(assigns.card) === "object" && assigns.card instanceof RezCard) {
    // Otherwise it should be a reference to a card
    blockSource = assigns.card;
  } else {
    throw new Error(`Attempt to embed card with bad 'card' assign! (${typeof(assigns.card)})`);
  }
  blockSource.$parent = bindings.card;
  const block = new RezBlock("block", blockSource);
  block.parentBlock = bindings.card.parentBlock;
  return block.html();
}

%% ----------------------------------------------------------------------------
%% A scene that handles loading a game
%% ----------------------------------------------------------------------------

@scene $load_game {
  $built_in: true

  initial_card_id: #$load_game_form
  layout: ```
  ${content}
  ```
  layout_mode: :single
}

@card $load_game_form {
  $built_in: true

  content: ```
  <form rez-live name="load_form">
    <input type="file" name="data"/>
    <input type="submit"/>
  </form>
  ```

  on_load_form: (card, data) => {
    console.log("In the load form handler!");
    const form = data.form;
    const file_input = form.querySelector("input[type=file]");
    const [file] = file_input.files;
    const reader = new FileReader();
    reader.addEventListener("load", function() {
      $game.load(reader.result);
    });
    reader.readAsText(file);
    return RezEvent.noop();
  }
}

%% ----------------------------------------------------------------------------
%% Default Behaviour Conditions & Actions
%% ----------------------------------------------------------------------------

@system $actor_behaviours {
  $built_in: true

  enabled: false
  priority: 10
  after_event: (system, evt, result) => {
    if(evt.target.dataset.event === "behaviours") {
      console.log("Running actor_behaviours system");
      const game = event.game;
      const actors = game.getAll("actor").filter((actor) => {return actor.hasAttribute("behaviours")});
      const wmem = {};
      actors.forEach((actor) => {
        const btree = actor.getAttributeValue("behaviours");
        btree.executeBehaviour(wmem);
      });
    }
    return result;
  }
}

%% Core behaviours
%% These behaviours model the 'generic' behaviours implemented in the
%% Crysis engine:
%% https://docs.cryengine.com/display/CEPROG/Modular+Behavior+Tree+Nodes
%% See the Behaviour Tree part of the user guide for more information.
%%
%% Core behaviours use an id beginning with a dollar to avoid conflict
%% with author generated id's.

@behaviour $select {
  %% The $select behaviour executes it's children in turn until one of them
  %% succeeds, then $select succeeds. If no child succeeeds then $select fails.

  $built_in: true
  $template: true
  options: []
  min_children: 2

  execute: (owner, behaviour, wmem) => {
    let result = {success: true, wmem: wmem};
    for(const child of behaviour.children) {
      result = child.executeBehaviour(result.wmem);
      if(result.success) {
        break;
      }
    }
    return result;
  }
}

@behaviour $select_r {
  %% The $select_r behaviour is similar to $select except that each time it
  %% executes, it executes its children in random order.

  $built_in: true
  $template: true
  options: []
  min_children: 2

  execute: (owner, behaviour, wmem) => {
    let result = {success: true, wmem: wmem};
    const indices = Math.range(0, behaviour.childCount-1).fy_shuffle();
    for(const i of indices) {
      const child = behaviour.getChildAt(i);
      result = child.executeBehaviour(result.wmem);
      if(result.success) {
        break;
      }
    }
    return result;
  }
}

@behaviour $select_p {
  %% The $select_p behaviour is similar to SELECT except that before ticking any
  %% child it does a probability check using the "p" option. If the check passes
  %% it ticks the child, otherwise it moves on to the next child. If a child
  %% succeeds $select_p succeeds. If no child succeeds, $select_p fails.

  $built_in: true
  $template: true
  options: [:p]
  min_children: 2

  configure: (behaviour) => {
    const p = behaviour.intOption("p");
    if(p < 0 || p > 100) {
      throw "Behaviour: " + behaviour.id + " invalid 'p' option specified.";
    }
  }

  execute: (owner, behaviour, wmem) => {
    const p = behaviour.intOption("p");
    const die = new RezDie(1, 100, 0);
    let result = {success: false, wmem};
    for(const child of behaviour.children) {
      if(die.roll() < p) {
        result = child.executeBehaviour(result.wmem);
        if(result.success) {
          break;
        }
      }
    }
    return result;
  }
}

@behaviour $sequence {
  %% The $sequence behaviour executes its children in turn. If they all succeed
  %% then the $sequence succeeds. If a child fails the $sequence fails and does
  %% not execute any further children.

  $built_in: true
  $template: true
  options: []
  min_children: 2

  execute: (owner, behaviour, wmem) => {
    let result;
    for(const child of behaviour.children) {
      result = child.executeBehaviour(wmem);
      if(!result.success) {
        break;
      }
    }

    return result;
  }
}

@behaviour $loop {
  %% The $loop behaviour takes one child and executes it 'count' times. If it
  %% succeeds on every repetition the $loop succeeds. If the child ever fails
  %% the $loop fails.

  $built_in: true
  $template: true
  options: [:count]
  min_children: 1
  max_children: 1

  execute: (owner, behaviour, wmem) => {
    const count = behaviour.intOption("count");
    let result = {success: false, wmem: wmem};
    for(let i=0; i<count; i++) {
      result = this.firstChild.executeBehaviour(result.wmem);
      if(!result.success) {
        return result;
      }
    }

    return result;
  }
}

@behaviour $loop_until {
  %% The $loop_until behaviour takes one child and executes it until it
  %% succeeds. The 'attempts' option specifies how many times it will
  %% executed. If the child ever succeeds, $loop_until succeeds. If the
  %% child doesn't succeed in the number of attempts then $loop_until fails.

  $built_in: true
  $template: true
  options: [:attempts]
  min_children: 1
  max_children: 1

  execute: (owner, behaviour, wmem) => {
    const attempts = behaviour.intOption("attempts");
    let result = {success: false, wmem: wmem};
    for(let i=0; i<attempts; i++) {
      result = behaviour.firstChild.executeBehaviour(result.wmem);
      if(result.success) {
        break;
      }
    }

    return result;
  }
}

@behaviour $maybe {
  %% The $maybe behaviour takes one child and based on the option "p" determines
  %% whether to execute it or not. If it executes the child then $maybe succeeds
  %% if the child succeeds or fails if the child fails. If it doesn't execute
  %% the child then $maybe fails.

  $built_in: true
  $template: true
  options: [:p]
  min_children: 1
  max_children: 1

  execute: (owner, behaviour, wmem) => {
    const p = behaviour.intOption("p");
    const die = new RezDie(1, 100, 0);

    if(die.roll() < p) {
      return behaviour.firstChild.executeBehaviour(wmem);
    } else {
      return {success: false, id: behaviour.id, error: "Didn't execute"};
    }
  }
}

@behaviour $either {
  %% The $either behaviour takes two children and based on the probability
  %% option "p" determines whether to execute the first or second child.
  %% Having decided which child to execute $either succeeds or fails based
  %% on whether the selected child succeeds or fails.

  $built_in: true
  $template: true
  options: [:p]
  min_children: 2
  max_children: 2

  execute: (owner, behaviour, wmem) => {
    const p = behaviour.intOption("p");
    const die = new RezDie(1, 100, 0);
    const roll = die.roll();

    if(roll < p) {
      return behaviour.firstChild.executeBehaviour(wmem);
    } else {
      return behaviour.secondChild.executeBehaviour(wmem);
    }
  }
}

@behaviour $random_choice {
  %% The $random_choice behaviour takes two or more children. When $random_choice
  %% executes it selects a child at random and executes it. If that child
  %% succeeds then $random_choice succeeds, otherwise it fails.

  $built_in: true
  $template: true
  options: []
  min_children: 2

  execute: (owner, behaviour, wmem) => {
    const die = new RezDie(1, behaviour.childCount, -1);
    const child = behaviour.getChildAt(die.roll());
    return child.executeBehaviour(wmem);
  }
}

@behaviour $random_each {
  %% The $random_each behaviour takes two or more children. When $random_each
  %% executes it selects a child, without replacement, and executes it. If
  %% the selected child succeeds then $random_each succeeds, otherwise it
  %% fails. Without replacement means that no child can be selected twice
  %% until all children have been selected at least once.

  $built_in: true
  $template: true
  options: []
  min_children: 2

  execute: (owner, behaviour, wmem) => {
    let child_walk = wmem[behaviour.id];

    if(typeof(child_walk) == "undefined" || child_walk.length == 0) {
      child_walk = Array.from(Array(behaviour.childCount).keys()).fy_shuffle();
    }

    const child_idx = child_walk.shift();
    wmem[behaviour.id] = child_walk;

    const child = behaviour.getChildAt(child_idx);
    return child.executeBehaviour(wmem);
  }
}

@behaviour $always {
  %% The $always behaviour takes one child and executes it, $always succeeds
  %% regardless of whether the child succeeds.

  $built_in: true
  $template: true
  options: []
  min_children: 1
  max_children: 1

  execute: (owner, behaviour, wmem) => {
    const result = behaviour.firstChild.executeBehaviour(wmem);
    result.success = true;
    return result;
  }
}

@behaviour $never {
  %% The $never behaviour takes one child and executes it, $never fails regardless
  %% of whether the child fails.

  $built_in: true
  $template: true
  options: []
  min_children: 1
  max_children: 1

  execute: (owner, behaviour, wmem) => {
    const result = behaviour.firstChild.executeBehaviour(wmem);
    result.success = false;
    return result;
  }
}

@behaviour $invert {
  %% The $invert behaviour takes one child and executes it. If the child succeeds
  %% then $invert will fail. If the child fails then $invert will succeed.

  $built_in: true
  $template: true
  options: []
  min_children: 1
  max_children: 1

  execute: (owner, behaviour, wmem) => {
    const result = behaviour.firstChild.executeBehaviour(wmem);
    result.success = !result.success;
    return result;
  }
}

@behaviour $fail {
  %% The $fail behaviour automatically fails.

  $built_in: true
  $template: true
  options: []
  max_children: 0

  execute: (owner, behaviour, wmem) => {
    return {success: false, wmem: wmem};
  }
}

@behaviour $succeed {
  %% The $succeed behaviour automatically succeeds.

  $built_in: true
  $template: true
  options: []
  max_children: 0

  execute: (owner, behaviour, wmem) => {
    return {success: true, wmem: wmem};
  }
}
